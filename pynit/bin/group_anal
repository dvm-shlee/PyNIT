#!/usr/bin/env python

__author__ = 'SungHo Lee (shlee@unc.edu)'
__version_info__ = ('2017', '07', '12')
__version__ = '-'.join(__version_info__) + 'ALPHA'

import os, argparse
from subprocess import PIPE, Popen
import shlex

def get_ics_groups(ic, path, group, cond):
    output = dict()
    for g in group:
        output[g] = dict()
        for c in cond:
            p = os.path.join(os.path.abspath(path), g, c)
            output[g][c] = [os.path.join(p, f) for f in os.listdir(p) if str(ic).zfill(2) in f.split('_')[0]]
    return output

def shell(cmd):
    """Execute shell command

    :param cmd: str, command to execute
    :return: stdout, error
    """
    try:
        processor = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE)
        out, err = processor.communicate()
        return out, err
    except OSError as e:
        print('error')

def main():
    parser = argparse.ArgumentParser(prog='group_analysis', description="GroupAnalysis for Heather_Cocaine")
    parser.add_argument("-i", "--path", help="Main folder", type=str)
    parser.add_argument("--ic", default=None)
    parser.add_argument("--group", nargs='*', default=None)
    parser.add_argument("--cond", nargs='*', default=None)
    parser.add_argument("--prefix", default=None)
    args = parser.parse_args()

    if args.path and args.group and args.cond and args.comp and args.ic:
        output = get_ics_groups(args.ic, args.path, args.group, args.cond)
        sal_pre = output['SAL']['01-Pre']
        sal_pst = output['SAL']['02-Post']
        sal_abs = output['SAL']['03-Abst']
        coc_pre = output['COC']['01-Pre']
        coc_pst = output['COC']['02-Post']
        coc_abs = output['COC']['03-Abst']

        header = "Subj\tGroup\tCondition\tInputFile"
        sal_pre_dset = "\n".join(['s{}\tsal\tPre\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(sal_pre)])
        sal_pst_dset = "\n".join(['s{}\tsal\tPost\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(sal_pst)])
        sal_abs_dset = "\n".join(['s{}\tsal\tAbst\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(sal_abs)])
        coc_pre_dset = "\n".join(['c{}\tcoc\tPre\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(coc_pre)])
        coc_pst_dset = "\n".join(['c{}\tcoc\tPost\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(coc_pst)])
        coc_abs_dset = "\n".join(['c{}\tcoc\tAbst\t{} \\'.format(str(i+1).zfill(2), f) for i, f in enumerate(coc_abs)])[:-1]
        list_files = '\n'.join([header, sal_pre_dset, sal_pst_dset, sal_abs_dset, coc_pre_dset, coc_pst_dset, coc_abs_dset])
        
        if not args.prefix:
            cmd = ["3dMVM -prefix GroupResults_IC{}.nii.gz -jobs 12".format(str(args.ic).zfill(2)),
            "-bsVars Group -wsVars Condition -num_glt 9",
            "-gltLabel 1 sal_Pre_vs_Post -gltCode 1 'Group : 1*sal Condition : 1*Pre -1*Post'",
            "-gltLabel 2 sal_Pre_vs_Abst -gltCode 2 'Group : 1*sal Condition : 1*Pre -1*Abst'",
            "-gltLabel 3 sal_Post_vs_Abst -gltCode 3 'Group : 1*sal Condition : 1*Post -1*Abst'",
            "-gltLabel 4 coc_Pre_vs_Post -gltCode 4 'Group : 1*coc Condition : 1*Pre -1*Post'",
            "-gltLabel 5 coc_Pre_vs_Abst -gltCode 5 'Group : 1*coc Condition : 1*Pre -1*Abst'",
            "-gltLabel 6 coc_Post_vs_Abst -gltCode 6 'Group : 1*coc Condition : 1*Post -1*Abst'",
            "-gltLabel 7 Pre_sal_vs_coc -gltCode 7 'Group : 1*sal -1*coc Condition : 1*Pre'",
            "-gltLabel 8 Post_sal_vs_coc -gltCode 8 'Group : 1*sal -1*coc Condition : 1*Post'",
            "-gltLabel 9 Abst_sal_vs_coc -gltCode 9 'Group : 1*sal -1*coc Condition : 1*Abst'",
            "-dataTable {}".format(list_files)]
        else:
            cmd = ["3dMVM -prefix {}_IC{}.nii.gz -jobs 12".format(args.prefix, str(args.ic).zfill(2)),
            "-bsVars Group -wsVars Condition -num_glt 9",
            "-gltLabel 1 sal_Pre_vs_Post -gltCode 1 'Group : 1*sal Condition : 1*Pre -1*Post'",
            "-gltLabel 2 sal_Pre_vs_Abst -gltCode 2 'Group : 1*sal Condition : 1*Pre -1*Abst'",
            "-gltLabel 3 sal_Post_vs_Abst -gltCode 3 'Group : 1*sal Condition : 1*Post -1*Abst'",
            "-gltLabel 4 coc_Pre_vs_Post -gltCode 4 'Group : 1*coc Condition : 1*Pre -1*Post'",
            "-gltLabel 5 coc_Pre_vs_Abst -gltCode 5 'Group : 1*coc Condition : 1*Pre -1*Abst'",
            "-gltLabel 6 coc_Post_vs_Abst -gltCode 6 'Group : 1*coc Condition : 1*Post -1*Abst'",
            "-gltLabel 7 Pre_sal_vs_coc -gltCode 7 'Group : 1*sal -1*coc Condition : 1*Pre'",
            "-gltLabel 8 Post_sal_vs_coc -gltCode 8 'Group : 1*sal -1*coc Condition : 1*Post'",
            "-gltLabel 9 Abst_sal_vs_coc -gltCode 9 'Group : 1*sal -1*coc Condition : 1*Abst'",
            "-dataTable {}".format(list_files)]
        out, err = shell(cmd)
        print(out)
        print(err)
    else:
        parser.print_usage()

if __name__ == '__main__':

    main()

