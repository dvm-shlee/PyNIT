#!/usr/bin/env python

__author__ = 'SungHo Lee (shlee@unc.edu)'
__version_info__ = ('2017', '04', '09')
__version__ = '-'.join(__version_info__)

import argparse, sys
# try:
import nibabel as nib
import numpy as np
from tqdm import tqdm
import cv2
from skimage.morphology import reconstruction, disk
from skimage.filters import rank, sobel
from skimage.feature import canny
from skimage import exposure
from skimage.restoration import denoise_tv_chambolle
from scipy import ndimage as ndi
#
# except:
#     print "Required libraries (tqdm, numpy, nibabel, skimage) are not installed"
#     sys.exit(0)

def intensity_correction(img, h, type=None):
    if not type:
        type='anat'
    data = np.asarray(img.dataobj)
    seed = np.copy(data)
    mask = data

    if type == 'anat':
        seed[1:-1, 1:-1, 1:-1] = data.min()
        filled = reconstruction(seed, mask, method='dilation')

        for i in tqdm(range(filled.shape[-1])):
            tmp_img = filled[:, :, i]
            tmp_img *= 255. / (tmp_img.max() - tmp_img.min())
            tmp_img = tmp_img.astype('uint8')
            filled[:, :, i] = cv2.fastNlMeansDenoising(tmp_img, h=h)

    else:
        filled = exposure.equalize_hist(data)
        filled = denoise_tv_chambolle(filled, weight=0.05, eps=0.0002, multichannel=False)

        seed = np.copy(filled)
        seed[1:-1, 1:-1, 1:-1] = filled.max()
        mask = filled
        filled = reconstruction(seed, mask, method='erosion')
        #
        # for i in tqdm(range(filled.shape[-1])):
        #     tmp_img = filled[:, :, i]
        #     tmp_img *= 255. / (tmp_img.max() - tmp_img.min())
        #     tmp_img = tmp_img.astype('uint8')
        #     filled[:, :, i] = cv2.fastNlMeansDenoising(tmp_img, h=3)
        #
        # for i in tqdm(range(filled.shape[1])):
        #     tmp_img = filled[:, i, :]
        #     tmp_img *= 255. / (filled.max() - filled.min())
        #     tmp_img = tmp_img.astype('uint8')
        #     filled[:, i, :] = cv2.fastNlMeansDenoising(tmp_img, h=3)

    return nib.Nifti1Image(filled, img.affine)

def main():
    parser = argparse.ArgumentParser(prog='mask_prep', description="Prepare image for mask generation")
    parser.add_argument("h", help="Parameter", type=int)
    parser.add_argument("input", help="Input filename", type=str)
    parser.add_argument("output", help="Output filename", type=str)
    parser.add_argument("-f", "--func", action='store_true', help="Image type (anat or func)", default=False)
    parser.add_argument("-V", "--version", action="version", version="%(prog)s ("+__version__+")")
    args = parser.parse_args()

    img = nib.load(args.input)
    if args.func:
        img = intensity_correction(img, h=args.h, type='func')
    else:
        img = intensity_correction(img, h=args.h)
    img.to_filename(args.output)

if __name__ == '__main__':
    main()

