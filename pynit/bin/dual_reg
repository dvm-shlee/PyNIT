#!/usr/bin/env python

__author__ = 'SungHo Lee (shlee@unc.edu)'
__version_info__ = ('2017', '06', '25')
__version__ = '-'.join(__version_info__) + 'ALPHA'

import os, argparse, sys
try:
    import nibabel as nib
    import numpy as np
    # from sklearn.externals.joblib import Parallel, delayed
    from multiprocessing import cpu_count
    from multiprocessing.pool import ThreadPool
    from sklearn.linear_model import BayesianRidge
except:
    print "Required libraries (numpy, nibabel, sklearn, tqdm) are not installed"
    sys.exit(0)


class DualRegression(object):
    def __init__(self, path, template, ics, comp_n, subj, sess, prefix=None):
        self.path = path
        self.ics = np.asarray(nib.load(ics)._dataobj)
        self.comp_n = comp_n
        self.affine = nib.load(ics).affine
        self.mask = self.get_mask(template)
        self.prefix = prefix
        if not subj: #TODO: Parsing function
            self.subj = ['subj-01']
        else:
            self.subj = subj
        print('List of subjects : {}'.format(", ".join(self.subj)))
        if not sess:
            self.sess = ['sess-01']
        else:
            self.sess = sess
        print('List of sessions : {}'.format(", ".join(self.sess)))
        print('Start folder inspection....')
        self.pathlist = self.get_path()

    def get_path(self):
        return [os.path.join(self.path, subj, sess) for sess in self.sess for subj in self.subj]

    def get_filelist(self, path):
        return [os.path.join(path, f) for f in os.listdir(path) if '.nii' in f]

    def concat(self, filelist):
        print('Building subject sum....')
        return np.concatenate([np.asarray(f._dataobj) for f in map(nib.load, filelist)], -1)

    def get_mask(self, path):
        img = np.asarray(nib.load(path)._dataobj)
        img[img > 0] = 1
        return img

    def norm(self, data):
        return (data - data.mean())/data.std()

    def dual_regression(self, output, input_data, mask, ics, comp_n, affine):
        print('Running Dual Regression....')
        # reshape all inputs to 1D signal
        x, y, z, t = input_data.shape
        ics = ics.reshape(x * y * z, ics.shape[-1])
        mask = mask.reshape(x * y * z)
        input_data = input_data.reshape(x * y * z, t)

        # Skull stripping
        input_data[mask == 0] = 0

        # Dual regression (Bayesian Ridge Regression)
        reg = BayesianRidge(compute_score=True)
        reg.fit(input_data, ics[:, comp_n])
        reg.fit(input_data.T, reg.coef_)

        # save to file
        try:
            if self.prefix:
                nib.Nifti1Image(self.norm(reg.coef_).reshape(x, y, z),
                                affine).to_filename('IC{}_{}_{}.nii.gz'.format(comp_n, output, self.prefix))
            else:
                nib.Nifti1Image(self.norm(reg.coef_).reshape(x, y, z),
                                affine).to_filename('IC{}_{}.nii.gz'.format(comp_n, output))
            return 1
        except:
            return 0

    def run(self, parallel=True):
        for path in self.pathlist:
            subj_data = self.concat(self.get_filelist(path))
            print('Done!')
            output = '{}_{}'.format(*path.split(os.sep)[-2:])
            if not parallel:
                results = []
                for sig in self.comp_n:
                    results.append(self.dual_regression(output, subj_data, self.mask, self.ics, int(sig), self.affine))
                print(np.array(results).sum())
            else:
                # pool = ThreadPool(cpu_count())
                pool = ThreadPool(1)
                iteritem = [(output, subj_data, self.mask, self.ics, int(sig), self.affine) for sig in self.comp_n]
                results = pool.imap_unordered(self.worker, iteritem)
                print(np.array(results).sum())

    def worker(self, args):
        try:
            self.dual_regression(*args)
            return 1
        except:
            return 0


def main():
    parser = argparse.ArgumentParser(prog='dual_reg', description="DualRegression for Shihlab")
    parser.add_argument("-i", "--path", help="Main folder", type=str)
    parser.add_argument("-m", "--mask", help="Template filename", type=str)
    parser.add_argument("-a", "--ica", help="ICA results filename", type=str)
    parser.add_argument("-c", "--comp", nargs='*')
    parser.add_argument("--subj", nargs='*', default=None)
    parser.add_argument("--sess", nargs='*', default=None)
    parser.add_argument("--prefix", default=None)
    args = parser.parse_args()

    if args.path and args.mask and args.ica and args.comp:
        if not args.prefix:
            dr = DualRegression(args.path, args.mask, args.ica, args.comp,
                                subj=args.subj, sess=args.sess)
        else:
            dr = DualRegression(args.path, args.mask, args.ica, args.comp,
                                subj=args.subj, sess=args.sess, prefix=args.prefix)
        dr.run()
    else:
        parser.print_usage()

if __name__ == '__main__':
    main()

